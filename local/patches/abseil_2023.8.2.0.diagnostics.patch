diff --git a/inst/include/absl/algorithm/algorithm_test.cc b/inst/include/absl/algorithm/algorithm_test.cc
index d18df02..ee7fc11 100644
--- a/inst/include/absl/algorithm/algorithm_test.cc
+++ b/inst/include/absl/algorithm/algorithm_test.cc
@@ -52,14 +52,14 @@ TEST(EqualTest, EmptyRange) {
   std::vector<int> empty2;
 
   // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105705
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wnonnull"
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wnonnull"
+// #endif
   EXPECT_FALSE(absl::equal(v1.begin(), v1.end(), empty1.begin(), empty1.end()));
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic pop
+// #endif
   EXPECT_FALSE(absl::equal(empty1.begin(), empty1.end(), v1.begin(), v1.end()));
   EXPECT_TRUE(
       absl::equal(empty1.begin(), empty1.end(), empty2.begin(), empty2.end()));
diff --git a/inst/include/absl/base/internal/invoke.h b/inst/include/absl/base/internal/invoke.h
index 1fe5b73..b71dd87 100644
--- a/inst/include/absl/base/internal/invoke.h
+++ b/inst/include/absl/base/internal/invoke.h
@@ -104,16 +104,16 @@ struct MemFunAndRef : StrippedAccept<MemFunAndRef> {
   Invoke(MemFun&& mem_fun, Obj&& obj, Args&&... args) {
 // Ignore bogus GCC warnings on this line.
 // See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=101436 for similar example.
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0)
-#pragma GCC diagnostic push
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0)
+// #pragma GCC diagnostic push
 // #pragma GCC diagnostic ignored "-Warray-bounds"
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
-#endif
+// #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+// #endif
     return (std::forward<Obj>(obj).*
             std::forward<MemFun>(mem_fun))(std::forward<Args>(args)...);
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(11, 0)
+// #pragma GCC diagnostic pop
+// #endif
   }
 };
 
diff --git a/inst/include/absl/container/inlined_vector.h b/inst/include/absl/container/inlined_vector.h
index 04e2c38..b421ab2 100644
--- a/inst/include/absl/container/inlined_vector.h
+++ b/inst/include/absl/container/inlined_vector.h
@@ -643,15 +643,15 @@ class InlinedVector {
       // point to uninitialized memory at this point, a warning should be
       // issued. But `pos` is actually only used to compute an array index to
       // write to.
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+// #endif
       return storage_.Insert(pos, CopyValueAdapter<A>(std::addressof(dealias)),
                              n);
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic pop
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic pop
+// #endif
     } else {
       return const_cast<iterator>(pos);
     }
@@ -722,17 +722,17 @@ class InlinedVector {
     // point to uninitialized memory at this point, a warning should be
     // issued. But `pos` is actually only used to compute an array index to
     // write to.
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+// #endif
     return storage_.Insert(pos,
                            IteratorValueAdapter<A, MoveIterator<A>>(
                                MoveIterator<A>(std::addressof(dealias))),
                            1);
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic pop
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic pop
+// #endif
   }
 
   // `InlinedVector::emplace_back(...)`
diff --git a/inst/include/absl/container/internal/counting_allocator.h b/inst/include/absl/container/internal/counting_allocator.h
index 66068a5..d5c2b99 100644
--- a/inst/include/absl/container/internal/counting_allocator.h
+++ b/inst/include/absl/container/internal/counting_allocator.h
@@ -81,14 +81,14 @@ class CountingAllocator {
   void destroy(U* p) {
     Allocator allocator;
     // Ignore GCC warning bug.
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wuse-after-free"
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wuse-after-free"
+// #endif
     AllocatorTraits::destroy(allocator, p);
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic pop
+// #endif
     if (instance_count_ != nullptr) {
       *instance_count_ -= 1;
     }
diff --git a/inst/include/absl/container/internal/inlined_vector.h b/inst/include/absl/container/internal/inlined_vector.h
index 6e1dbab..8410d6c 100644
--- a/inst/include/absl/container/internal/inlined_vector.h
+++ b/inst/include/absl/container/internal/inlined_vector.h
@@ -37,10 +37,10 @@ ABSL_NAMESPACE_BEGIN
 namespace inlined_vector_internal {
 
 // GCC does not deal very well with the below code
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic push
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic push
 // #pragma GCC diagnostic ignored "-Warray-bounds"
-#endif
+// #endif
 
 template <typename A>
 using AllocatorTraits = std::allocator_traits<A>;
@@ -1079,9 +1079,9 @@ void Storage<T, N, A>::SwapInlinedElements(NotMemcpyPolicy policy,
 }
 
 // End ignore "array-bounds"
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic pop
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic pop
+// #endif
 
 }  // namespace inlined_vector_internal
 ABSL_NAMESPACE_END
diff --git a/inst/include/absl/container/internal/raw_hash_set_test.cc b/inst/include/absl/container/internal/raw_hash_set_test.cc
index 242a97c..0288558 100644
--- a/inst/include/absl/container/internal/raw_hash_set_test.cc
+++ b/inst/include/absl/container/internal/raw_hash_set_test.cc
@@ -551,18 +551,18 @@ TEST(Table, EmptyFunctorOptimization) {
 
 // Ignore unreachable-code warning. Compiler thinks one branch of each ternary
 // conditional is unreachable.
-#if defined(__clang__)
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunreachable-code"
-#endif
+// #if defined(__clang__)
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wunreachable-code"
+// #endif
   constexpr size_t mock_size = std::is_empty<HashtablezInfoHandle>()
                                    ? sizeof(MockTableInfozDisabled)
                                    : sizeof(MockTable);
   constexpr size_t generation_size =
       SwisstableGenerationsEnabled() ? sizeof(GenerationData) : 0;
-#if defined(__clang__)
-#pragma clang diagnostic pop
-#endif
+// #if defined(__clang__)
+// #pragma clang diagnostic pop
+// #endif
 
   EXPECT_EQ(
       mock_size + generation_size,
diff --git a/inst/include/absl/functional/internal/any_invocable.h b/inst/include/absl/functional/internal/any_invocable.h
index f096bb0..1d135e4 100644
--- a/inst/include/absl/functional/internal/any_invocable.h
+++ b/inst/include/absl/functional/internal/any_invocable.h
@@ -136,15 +136,15 @@ template <class ReturnType, class F, class... P,
           absl::enable_if_t<!std::is_void<ReturnType>::value, int> = 0>
 ReturnType InvokeR(F&& f, P&&... args) {
   // GCC 12 has a false-positive -Wmaybe-uninitialized warning here.
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+// #endif
   return absl::base_internal::invoke(std::forward<F>(f),
                                      std::forward<P>(args)...);
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic pop
+// #endif
 }
 
 //
@@ -214,14 +214,14 @@ T& ObjectInLocalStorage(TypeErasedState* const state) {
   // When `std::launder` or equivalent are not available, we rely on undefined
   // behavior, which works as intended on Abseil's officially supported
   // platforms as of Q2 2022.
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic ignored "-Wstrict-aliasing"
-#pragma GCC diagnostic push
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+// #pragma GCC diagnostic push
+// #endif
   return *reinterpret_cast<T*>(&state->storage);
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic pop
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic pop
+// #endif
 
 #endif
 }
@@ -525,16 +525,16 @@ class CoreImpl {
 // against comparing their decayed form with nullptr.
 // Since this is template-heavy code, we prefer to disable these warnings
 // locally instead of adding yet another overload of this function.
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic ignored "-Wpragmas"
-#pragma GCC diagnostic ignored "-Waddress"
-#pragma GCC diagnostic ignored "-Wnonnull-compare"
-#pragma GCC diagnostic push
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic ignored "-Wpragmas"
+// #pragma GCC diagnostic ignored "-Waddress"
+// #pragma GCC diagnostic ignored "-Wnonnull-compare"
+// #pragma GCC diagnostic push
+// #endif
     if (static_cast<RemoveCVRef<QualDecayedTRef>>(f) == nullptr) {
-#if !defined(__clang__) && defined(__GNUC__)
-#pragma GCC diagnostic pop
-#endif
+// #if !defined(__clang__) && defined(__GNUC__)
+// #pragma GCC diagnostic pop
+// #endif
       manager_ = EmptyManager;
       invoker_ = nullptr;
       return;
diff --git a/inst/include/absl/random/internal/explicit_seed_seq_test.cc b/inst/include/absl/random/internal/explicit_seed_seq_test.cc
index e36d5fa..6868450 100644
--- a/inst/include/absl/random/internal/explicit_seed_seq_test.cc
+++ b/inst/include/absl/random/internal/explicit_seed_seq_test.cc
@@ -166,14 +166,14 @@ TEST(ExplicitSeedSeq, CopyAndMoveConstructors) {
 
     // Apply the assignment-operator.
     // GCC 12 has a false-positive -Wstringop-overflow warning here.
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wstringop-overflow"
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wstringop-overflow"
+// #endif
     another_seq = seq_from_entropy;
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic pop
+// #endif
 
     // Re-generate seeds.
     seq_from_entropy.generate(seeds_1.begin(), seeds_1.end());
diff --git a/inst/include/absl/random/internal/randen_detect.cc b/inst/include/absl/random/internal/randen_detect.cc
index bdeab87..9e3c592 100644
--- a/inst/include/absl/random/internal/randen_detect.cc
+++ b/inst/include/absl/random/internal/randen_detect.cc
@@ -108,10 +108,10 @@ namespace random_internal {
 
 // The default return at the end of the function might be unreachable depending
 // on the configuration. Ignore that warning.
-#if defined(__clang__)
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunreachable-code-return"
-#endif
+// #if defined(__clang__)
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wunreachable-code-return"
+// #endif
 
 // CPUSupportsRandenHwAes returns whether the CPU is a microarchitecture
 // which supports the crpyto/aes instructions or extensions necessary to use the
@@ -220,9 +220,9 @@ bool CPUSupportsRandenHwAes() {
   //   https://stackoverflow.com/questions/45637888/how-to-determine-armv8-features-at-runtime-on-ios
 }
 
-#if defined(__clang__)
-#pragma clang diagnostic pop
-#endif
+// #if defined(__clang__)
+// #pragma clang diagnostic pop
+// #endif
 
 }  // namespace random_internal
 ABSL_NAMESPACE_END
diff --git a/inst/include/absl/random/internal/randen_hwaes.cc b/inst/include/absl/random/internal/randen_hwaes.cc
index f535f4c..9e869f8 100644
--- a/inst/include/absl/random/internal/randen_hwaes.cc
+++ b/inst/include/absl/random/internal/randen_hwaes.cc
@@ -257,10 +257,10 @@ inline ABSL_TARGET_CRYPTO void SwapEndian(void*) {}
 
 #endif
 
-#ifdef __clang__
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wunknown-pragmas"
-#endif
+// #ifdef __clang__
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wunknown-pragmas"
+// #endif
 
 // At this point, all of the platform-specific features have been defined /
 // implemented.
@@ -515,9 +515,9 @@ void ABSL_TARGET_CRYPTO RandenHwAes::Generate(const void* keys_void,
   Vector128Store(inner, state);
 }
 
-#ifdef __clang__
-#pragma clang diagnostic pop
-#endif
+// #ifdef __clang__
+// #pragma clang diagnostic pop
+// #endif
 
 }  // namespace random_internal
 ABSL_NAMESPACE_END
diff --git a/inst/include/absl/strings/internal/cord_rep_flat.h b/inst/include/absl/strings/internal/cord_rep_flat.h
index 27c4b21..805d391 100644
--- a/inst/include/absl/strings/internal/cord_rep_flat.h
+++ b/inst/include/absl/strings/internal/cord_rep_flat.h
@@ -121,15 +121,15 @@ struct CordRepFlat : public CordRep {
     const size_t size = RoundUpForTag(len + kFlatOverhead);
     void* const raw_rep = ::operator new(size);
     // GCC 13 has a false-positive -Wstringop-overflow warning here.
-    #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(13, 0)
-    #pragma GCC diagnostic push
-    #pragma GCC diagnostic ignored "-Wstringop-overflow"
-    #endif
+    // #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(13, 0)
+    // #pragma GCC diagnostic push
+    // #pragma GCC diagnostic ignored "-Wstringop-overflow"
+    // #endif
     CordRepFlat* rep = new (raw_rep) CordRepFlat();
     rep->tag = AllocatedSizeToTag(size);
-    #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(13, 0)
-    #pragma GCC diagnostic pop
-    #endif
+    // #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(13, 0)
+    // #pragma GCC diagnostic pop
+    // #endif
     return rep;
   }
 
diff --git a/inst/include/absl/strings/internal/str_format/bind_test.cc b/inst/include/absl/strings/internal/str_format/bind_test.cc
index 1eef9c4..8b1ee6f 100644
--- a/inst/include/absl/strings/internal/str_format/bind_test.cc
+++ b/inst/include/absl/strings/internal/str_format/bind_test.cc
@@ -46,8 +46,8 @@ TEST_F(FormatBindTest, BindSingle) {
   const int ia[] = { 10, 20, 30, 40};
   const FormatArgImpl args[] = {FormatArgImpl(ia[0]), FormatArgImpl(ia[1]),
                                 FormatArgImpl(ia[2]), FormatArgImpl(ia[3])};
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wmissing-field-initializers"
   const Expectation kExpect[] = {
     {__LINE__, "d",          2, &args[0], no, no, 2},
     {__LINE__, "4d",         2, &args[0],  4, no, 2},
@@ -78,7 +78,7 @@ TEST_F(FormatBindTest, BindSingle) {
     {__LINE__, "1$*6$d",     1},  // width position out of bounds
     {__LINE__, "1$.*6$d",    1},  // precision position out of bounds
   };
-#pragma GCC diagnostic pop
+// #pragma GCC diagnostic pop
   for (const Expectation &e : kExpect) {
     SCOPED_TRACE(e.line);
     SCOPED_TRACE(e.fmt);
diff --git a/inst/include/absl/strings/internal/utf8_test.cc b/inst/include/absl/strings/internal/utf8_test.cc
index 88dd503..9ceb8a0 100644
--- a/inst/include/absl/strings/internal/utf8_test.cc
+++ b/inst/include/absl/strings/internal/utf8_test.cc
@@ -22,11 +22,11 @@
 
 namespace {
 
-#if !defined(__cpp_char8_t)
-#if defined(__clang__)
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wc++2a-compat"
-#endif
+// #if !defined(__cpp_char8_t)
+// #if defined(__clang__)
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wc++2a-compat"
+// #endif
 TEST(EncodeUTF8Char, BasicFunction) {
   std::pair<char32_t, std::string> tests[] = {{0x0030, u8"\u0030"},
                                               {0x00A3, u8"\u00A3"},
@@ -58,9 +58,9 @@ TEST(EncodeUTF8Char, BasicFunction) {
   EXPECT_LE(absl::strings_internal::EncodeUTF8Char(buf2, -1),
             absl::strings_internal::kMaxEncodedUTF8Size);
 }
-#if defined(__clang__)
-#pragma clang diagnostic pop
-#endif
-#endif  // !defined(__cpp_char8_t)
+// #if defined(__clang__)
+// #pragma clang diagnostic pop
+// #endif
+// #endif  // !defined(__cpp_char8_t)
 
 }  // namespace
diff --git a/inst/include/absl/strings/str_split_test.cc b/inst/include/absl/strings/str_split_test.cc
index 04a64a4..574ccf7 100644
--- a/inst/include/absl/strings/str_split_test.cc
+++ b/inst/include/absl/strings/str_split_test.cc
@@ -678,11 +678,11 @@ TEST(Split, StringDelimiter) {
   }
 }
 
-#if !defined(__cpp_char8_t)
-#if defined(__clang__)
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wc++2a-compat"
-#endif
+// #if !defined(__cpp_char8_t)
+// #if defined(__clang__)
+// #pragma clang diagnostic push
+// #pragma clang diagnostic ignored "-Wc++2a-compat"
+// #endif
 TEST(Split, UTF8) {
   // Tests splitting utf8 strings and utf8 delimiters.
   std::string utf8_string = u8"\u03BA\u1F79\u03C3\u03BC\u03B5";
@@ -709,10 +709,10 @@ TEST(Split, UTF8) {
     EXPECT_THAT(v, ElementsAre("Foo", u8"h\u00E4llo", u8"th\u4E1Ere"));
   }
 }
-#if defined(__clang__)
-#pragma clang diagnostic pop
-#endif
-#endif  // !defined(__cpp_char8_t)
+// #if defined(__clang__)
+// #pragma clang diagnostic pop
+// #endif
+// #endif  // !defined(__cpp_char8_t)
 
 TEST(Split, EmptyStringDelimiter) {
   {
diff --git a/inst/include/absl/types/internal/optional.h b/inst/include/absl/types/internal/optional.h
index a96d260..e38075d 100644
--- a/inst/include/absl/types/internal/optional.h
+++ b/inst/include/absl/types/internal/optional.h
@@ -64,14 +64,14 @@ class optional_data_dtor_base {
   void destruct() noexcept {
     if (engaged_) {
       // `data_` must be initialized if `engaged_` is true.
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic push
+// #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+// #endif
       data_.~T();
-#if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
-#pragma GCC diagnostic pop
-#endif
+// #if ABSL_INTERNAL_HAVE_MIN_GNUC_VERSION(12, 0)
+// #pragma GCC diagnostic pop
+// #endif
       engaged_ = false;
     }
   }
